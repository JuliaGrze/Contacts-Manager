@model IEnumerable<PersonResponse>
@{
    ViewBag.Title = "Persons";
}

<!--Aby formularz zebrał wartości z formularza z konkretnego elementu to ten element musi miec name="..."-->
<form action="~/persons/index" method="get">
    <h1>Persons</h1>

    <!--Search-->

    <div class="box flex">
        <div class="flex-1">
            <select class="form-input" name="searchBy">
                @foreach (var field in ViewBag.SearchFields)
                {
                    @if(field.Key == ViewBag.CurrentSearchBy) { 
                        <option value="@field.Key" selected="selected")>@field.Value</option>
                    }else { 
                        <option value="@field.Key" )>@field.Value</option>
                    }
                }
                @* searchBy=PersonName&searchString=abc *@
            </select>
        </div>

        <div class="flex-1">
            <!--Value = zachowany stan z wyszukiwania-->
            <input type="search" id="Search" class="form-input" name="searchString" value="@ViewBag.CurrentSearchString">
        </div>

        <div class="flex-1">
            <button class="button button-blue-back">Search</button>
            <a href="~/persons/index" class="link-hover">Clear all</a>
        </div>
    </div>

    <!--Persons List-->
    <table class="table w-100 mt">
        <thead>
            <tr>
                <!--Partial View do wyswietlania nazwy kolumn i sortowania-->
                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.PersonName) },
                { "DisplayName", "Person Name" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Email) },
                { "DisplayName", "Email" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.DateOfBirth) },
                { "DisplayName", "Date of Birth" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Age) },
                { "DisplayName", "Age" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Gender) },
                { "DisplayName", "Gender" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Country) },
                { "DisplayName", "Country" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.Address) },
                { "DisplayName", "Address" },
                })

                @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData) {
                { "ColumnName", nameof(PersonResponse.ReceiveNewsLetters) },
                { "DisplayName", "Receive News Letters" },
                })
            </tr>
        </thead>
        <tbody>
            @foreach (PersonResponse person in Model)
            {
                <tr>
                    <td>@person.PersonName</td>
                    <td>@person.Email</td>
                    <td>@person.DateOfBirth?.ToString("dd/MM/yyyy")</td>
                    <td>@person.Age</td>
                    <td>@person.Gender</td>
                    <td>@person.Country</td>
                    <td>@person.Address</td>
                    <td>@person.ReceiveNewsLetters</td>
                </tr>
            }
        </tbody>
    </table>
</form>